//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgJsonStorage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgJsonStorage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgJsonStorage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgJsonStorage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgJsonStorage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MgJsonStorage() : this(touchvgPINVOKE.new_MgJsonStorage(), true) {
  }

  public MgStorage storageForRead(string content) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgJsonStorage_storageForRead__SWIG_0(swigCPtr, content);
    MgStorage ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgStorage(cPtr, false);
    return ret;
  }

  public MgStorage storageForWrite() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgJsonStorage_storageForWrite(swigCPtr);
    MgStorage ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgStorage(cPtr, false);
    return ret;
  }

  public MgStorage storageForRead(MgJsonFile file) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgJsonStorage_storageForRead__SWIG_1(swigCPtr, MgJsonFile.getCPtr(file));
    MgStorage ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgStorage(cPtr, false);
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save(MgJsonFile file, bool pretty) {
    bool ret = touchvgPINVOKE.MgJsonStorage_save__SWIG_0(swigCPtr, MgJsonFile.getCPtr(file), pretty);
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool save(MgJsonFile file) {
    bool ret = touchvgPINVOKE.MgJsonStorage_save__SWIG_1(swigCPtr, MgJsonFile.getCPtr(file));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string stringify(bool pretty) {
    string ret = touchvgPINVOKE.MgJsonStorage_stringify__SWIG_0(swigCPtr, pretty);
    return ret;
  }

  public string stringify() {
    string ret = touchvgPINVOKE.MgJsonStorage_stringify__SWIG_1(swigCPtr);
    return ret;
  }

  public void clear() {
    touchvgPINVOKE.MgJsonStorage_clear(swigCPtr);
  }

  public string getParseError() {
    string ret = touchvgPINVOKE.MgJsonStorage_getParseError(swigCPtr);
    return ret;
  }

  public void setArrayMode(bool arr) {
    touchvgPINVOKE.MgJsonStorage_setArrayMode(swigCPtr, arr);
  }

  public void saveNumberAsString(bool str) {
    touchvgPINVOKE.MgJsonStorage_saveNumberAsString(swigCPtr, str);
  }

  public static bool toUTF8(string infile, string outfile) {
    bool ret = touchvgPINVOKE.MgJsonStorage_toUTF8(infile, outfile);
    return ret;
  }

  public static bool toUTF16(string infile, string outfile) {
    bool ret = touchvgPINVOKE.MgJsonStorage_toUTF16(infile, outfile);
    return ret;
  }

}

}
