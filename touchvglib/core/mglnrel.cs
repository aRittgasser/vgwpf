//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class mglnrel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mglnrel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mglnrel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~mglnrel() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_mglnrel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static bool isLeft(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isLeft(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLeft2(Point2d a, Point2d b, Point2d pt, Tol tol) {
    bool ret = touchvgPINVOKE.mglnrel_isLeft2(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLeftOn(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isLeftOn(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isLeftOn2(Point2d a, Point2d b, Point2d pt, Tol tol) {
    bool ret = touchvgPINVOKE.mglnrel_isLeftOn2(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isColinear(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isColinear(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isColinear2(Point2d a, Point2d b, Point2d pt, Tol tol) {
    bool ret = touchvgPINVOKE.mglnrel_isColinear2(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isIntersectProp(Point2d a, Point2d b, Point2d c, Point2d d) {
    bool ret = touchvgPINVOKE.mglnrel_isIntersectProp(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(c), Point2d.getCPtr(d));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isBetweenLine(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isBetweenLine(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isProjectBetweenLine(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isProjectBetweenLine(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isProjectBetweenRayline(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isProjectBetweenRayline(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isBetweenLine2(Point2d a, Point2d b, Point2d pt, Tol tol) {
    bool ret = touchvgPINVOKE.mglnrel_isBetweenLine2(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isBetweenLine3(Point2d a, Point2d b, Point2d pt, Point2d nearpt) {
    bool ret = touchvgPINVOKE.mglnrel_isBetweenLine3__SWIG_0(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Point2d.getCPtr(nearpt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isBetweenLine3(Point2d a, Point2d b, Point2d pt) {
    bool ret = touchvgPINVOKE.mglnrel_isBetweenLine3__SWIG_1(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isIntersect(Point2d a, Point2d b, Point2d c, Point2d d) {
    bool ret = touchvgPINVOKE.mglnrel_isIntersect(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(c), Point2d.getCPtr(d));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ptToBeeline(Point2d a, Point2d b, Point2d pt) {
    float ret = touchvgPINVOKE.mglnrel_ptToBeeline(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ptToBeeline2(Point2d a, Point2d b, Point2d pt, Point2d ptPerp) {
    float ret = touchvgPINVOKE.mglnrel_ptToBeeline2(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Point2d.getCPtr(ptPerp));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ptToLine(Point2d a, Point2d b, Point2d pt, Point2d nearpt) {
    float ret = touchvgPINVOKE.mglnrel_ptToLine(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(pt), Point2d.getCPtr(nearpt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool crossLineAbc(float a1, float b1, float c1, float a2, float b2, float c2, Point2d ptCross, Tol tolVec) {
    bool ret = touchvgPINVOKE.mglnrel_crossLineAbc__SWIG_0(a1, b1, c1, a2, b2, c2, Point2d.getCPtr(ptCross), Tol.getCPtr(tolVec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool crossLineAbc(float a1, float b1, float c1, float a2, float b2, float c2, Point2d ptCross) {
    bool ret = touchvgPINVOKE.mglnrel_crossLineAbc__SWIG_1(a1, b1, c1, a2, b2, c2, Point2d.getCPtr(ptCross));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool cross2Line(Point2d a, Point2d b, Point2d c, Point2d d, Point2d ptCross, Tol tolVec) {
    bool ret = touchvgPINVOKE.mglnrel_cross2Line__SWIG_0(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(c), Point2d.getCPtr(d), Point2d.getCPtr(ptCross), Tol.getCPtr(tolVec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool cross2Line(Point2d a, Point2d b, Point2d c, Point2d d, Point2d ptCross) {
    bool ret = touchvgPINVOKE.mglnrel_cross2Line__SWIG_1(Point2d.getCPtr(a), Point2d.getCPtr(b), Point2d.getCPtr(c), Point2d.getCPtr(d), Point2d.getCPtr(ptCross));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool clipLine(Point2d pt1, Point2d pt2, Box2d box) {
    bool ret = touchvgPINVOKE.mglnrel_clipLine(Point2d.getCPtr(pt1), Point2d.getCPtr(pt2), Box2d.getCPtr(box));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public mglnrel() : this(touchvgPINVOKE.new_mglnrel(), true) {
  }

}

}
