//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgRecordShapes : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgRecordShapes(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgRecordShapes obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgRecordShapes() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgRecordShapes(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public MgRecordShapes(string path, MgShapeDoc doc, bool forUndo, int curTick) : this(touchvgPINVOKE.new_MgRecordShapes(path, MgShapeDoc.getCPtr(doc), forUndo, curTick), true) {
  }

  public int getCurrentTick(int curTick) {
    int ret = touchvgPINVOKE.MgRecordShapes_getCurrentTick(swigCPtr, curTick);
    return ret;
  }

  public bool isLoading() {
    bool ret = touchvgPINVOKE.MgRecordShapes_isLoading(swigCPtr);
    return ret;
  }

  public void setLoading(bool loading) {
    touchvgPINVOKE.MgRecordShapes_setLoading(swigCPtr, loading);
  }

  public bool onResume(int ticks) {
    bool ret = touchvgPINVOKE.MgRecordShapes_onResume(swigCPtr, ticks);
    return ret;
  }

  public void restore(int index, int count, int tick, int curTick) {
    touchvgPINVOKE.MgRecordShapes_restore(swigCPtr, index, count, tick, curTick);
  }

  public void stopRecordIndex() {
    touchvgPINVOKE.MgRecordShapes_stopRecordIndex(swigCPtr);
  }

  public bool isPlaying() {
    bool ret = touchvgPINVOKE.MgRecordShapes_isPlaying(swigCPtr);
    return ret;
  }

  public int getFileTick() {
    int ret = touchvgPINVOKE.MgRecordShapes_getFileTick(swigCPtr);
    return ret;
  }

  public int getFileFlags() {
    int ret = touchvgPINVOKE.MgRecordShapes_getFileFlags(swigCPtr);
    return ret;
  }

  public int getFileCount() {
    int ret = touchvgPINVOKE.MgRecordShapes_getFileCount(swigCPtr);
    return ret;
  }

  public bool applyFirstFile(MgShapeFactory factory, MgShapeDoc doc) {
    bool ret = touchvgPINVOKE.MgRecordShapes_applyFirstFile__SWIG_0(swigCPtr, MgShapeFactory.getCPtr(factory), MgShapeDoc.getCPtr(doc));
    return ret;
  }

  public bool applyFirstFile(MgShapeFactory factory, MgShapeDoc doc, string filename) {
    bool ret = touchvgPINVOKE.MgRecordShapes_applyFirstFile__SWIG_1(swigCPtr, MgShapeFactory.getCPtr(factory), MgShapeDoc.getCPtr(doc), filename);
    return ret;
  }

  public int applyRedoFile(MgShapeFactory f, MgShapeDoc doc, MgShapes dyns, int index) {
    int ret = touchvgPINVOKE.MgRecordShapes_applyRedoFile(swigCPtr, MgShapeFactory.getCPtr(f), MgShapeDoc.getCPtr(doc), MgShapes.getCPtr(dyns), index);
    return ret;
  }

  public int applyUndoFile(MgShapeFactory f, MgShapeDoc doc, MgShapes dyns, int index, int curTick) {
    int ret = touchvgPINVOKE.MgRecordShapes_applyUndoFile(swigCPtr, MgShapeFactory.getCPtr(f), MgShapeDoc.getCPtr(doc), MgShapes.getCPtr(dyns), index, curTick);
    return ret;
  }

  public static readonly int ADD = touchvgPINVOKE.MgRecordShapes_ADD_get();
  public static readonly int EDIT = touchvgPINVOKE.MgRecordShapes_EDIT_get();
  public static readonly int DEL = touchvgPINVOKE.MgRecordShapes_DEL_get();
  public static readonly int DYN = touchvgPINVOKE.MgRecordShapes_DYN_get();
  public static readonly int DOC_CHANGED = touchvgPINVOKE.MgRecordShapes_DOC_CHANGED_get();
  public static readonly int SHAPE_APPEND = touchvgPINVOKE.MgRecordShapes_SHAPE_APPEND_get();
  public static readonly int DYN_CHANGED = touchvgPINVOKE.MgRecordShapes_DYN_CHANGED_get();

}

}
