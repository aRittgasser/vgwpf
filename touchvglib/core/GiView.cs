//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class GiView : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GiView(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GiView obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GiView() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_GiView(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void regenAll(bool changed) {
    if (SwigDerivedClassHasMethod("regenAll", swigMethodTypes0)) touchvgPINVOKE.GiView_regenAllSwigExplicitGiView(swigCPtr, changed); else touchvgPINVOKE.GiView_regenAll(swigCPtr, changed);
  }

  public virtual void regenAppend(int sid, int playh) {
    if (SwigDerivedClassHasMethod("regenAppend", swigMethodTypes1)) touchvgPINVOKE.GiView_regenAppendSwigExplicitGiView(swigCPtr, sid, playh); else touchvgPINVOKE.GiView_regenAppend(swigCPtr, sid, playh);
  }

  public virtual void redraw(bool changed) {
    if (SwigDerivedClassHasMethod("redraw", swigMethodTypes2)) touchvgPINVOKE.GiView_redrawSwigExplicitGiView(swigCPtr, changed); else touchvgPINVOKE.GiView_redraw(swigCPtr, changed);
  }

  public virtual bool useFinger() {
    bool ret = (SwigDerivedClassHasMethod("useFinger", swigMethodTypes3) ? touchvgPINVOKE.GiView_useFingerSwigExplicitGiView(swigCPtr) : touchvgPINVOKE.GiView_useFinger(swigCPtr));
    return ret;
  }

  public virtual bool isContextActionsVisible() {
    bool ret = (SwigDerivedClassHasMethod("isContextActionsVisible", swigMethodTypes4) ? touchvgPINVOKE.GiView_isContextActionsVisibleSwigExplicitGiView(swigCPtr) : touchvgPINVOKE.GiView_isContextActionsVisible(swigCPtr));
    return ret;
  }

  public virtual bool showContextActions(Ints actions, Floats buttonXY, float x, float y, float w, float h) {
    bool ret = (SwigDerivedClassHasMethod("showContextActions", swigMethodTypes5) ? touchvgPINVOKE.GiView_showContextActionsSwigExplicitGiView(swigCPtr, Ints.getCPtr(actions), Floats.getCPtr(buttonXY), x, y, w, h) : touchvgPINVOKE.GiView_showContextActions(swigCPtr, Ints.getCPtr(actions), Floats.getCPtr(buttonXY), x, y, w, h));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void hideContextActions() {
    if (SwigDerivedClassHasMethod("hideContextActions", swigMethodTypes6)) touchvgPINVOKE.GiView_hideContextActionsSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_hideContextActions(swigCPtr);
  }

  public virtual void commandChanged() {
    if (SwigDerivedClassHasMethod("commandChanged", swigMethodTypes7)) touchvgPINVOKE.GiView_commandChangedSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_commandChanged(swigCPtr);
  }

  public virtual void selectionChanged() {
    if (SwigDerivedClassHasMethod("selectionChanged", swigMethodTypes8)) touchvgPINVOKE.GiView_selectionChangedSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_selectionChanged(swigCPtr);
  }

  public virtual void contentChanged() {
    if (SwigDerivedClassHasMethod("contentChanged", swigMethodTypes9)) touchvgPINVOKE.GiView_contentChangedSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_contentChanged(swigCPtr);
  }

  public virtual void dynamicChanged() {
    if (SwigDerivedClassHasMethod("dynamicChanged", swigMethodTypes10)) touchvgPINVOKE.GiView_dynamicChangedSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_dynamicChanged(swigCPtr);
  }

  public virtual void zoomChanged() {
    if (SwigDerivedClassHasMethod("zoomChanged", swigMethodTypes11)) touchvgPINVOKE.GiView_zoomChangedSwigExplicitGiView(swigCPtr); else touchvgPINVOKE.GiView_zoomChanged(swigCPtr);
  }

  public virtual void viewChanged(GiView oldview) {
    if (SwigDerivedClassHasMethod("viewChanged", swigMethodTypes12)) touchvgPINVOKE.GiView_viewChangedSwigExplicitGiView(swigCPtr, GiView.getCPtr(oldview)); else touchvgPINVOKE.GiView_viewChanged(swigCPtr, GiView.getCPtr(oldview));
  }

  public virtual void shapeWillDelete(int sid) {
    if (SwigDerivedClassHasMethod("shapeWillDelete", swigMethodTypes13)) touchvgPINVOKE.GiView_shapeWillDeleteSwigExplicitGiView(swigCPtr, sid); else touchvgPINVOKE.GiView_shapeWillDelete(swigCPtr, sid);
  }

  public virtual void shapeDeleted(int sid) {
    if (SwigDerivedClassHasMethod("shapeDeleted", swigMethodTypes14)) touchvgPINVOKE.GiView_shapeDeletedSwigExplicitGiView(swigCPtr, sid); else touchvgPINVOKE.GiView_shapeDeleted(swigCPtr, sid);
  }

  public virtual bool shapeDblClick(int type, int sid, int tag) {
    bool ret = (SwigDerivedClassHasMethod("shapeDblClick", swigMethodTypes15) ? touchvgPINVOKE.GiView_shapeDblClickSwigExplicitGiView(swigCPtr, type, sid, tag) : touchvgPINVOKE.GiView_shapeDblClick(swigCPtr, type, sid, tag));
    return ret;
  }

  public virtual bool shapeClicked(int type, int sid, int tag, float x, float y) {
    bool ret = (SwigDerivedClassHasMethod("shapeClicked", swigMethodTypes16) ? touchvgPINVOKE.GiView_shapeClickedSwigExplicitGiView(swigCPtr, type, sid, tag, x, y) : touchvgPINVOKE.GiView_shapeClicked(swigCPtr, type, sid, tag, x, y));
    return ret;
  }

  public virtual void showMessage(string text) {
    if (SwigDerivedClassHasMethod("showMessage", swigMethodTypes17)) touchvgPINVOKE.GiView_showMessageSwigExplicitGiView(swigCPtr, text); else touchvgPINVOKE.GiView_showMessage(swigCPtr, text);
  }

  public virtual void getLocalizedString(string name, MgStringCallback c) {
    if (SwigDerivedClassHasMethod("getLocalizedString", swigMethodTypes18)) touchvgPINVOKE.GiView_getLocalizedStringSwigExplicitGiView(swigCPtr, name, MgStringCallback.getCPtr(c)); else touchvgPINVOKE.GiView_getLocalizedString(swigCPtr, name, MgStringCallback.getCPtr(c));
  }

  public GiView() : this(touchvgPINVOKE.new_GiView(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("regenAll", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateGiView_0(SwigDirectorregenAll);
    if (SwigDerivedClassHasMethod("regenAppend", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateGiView_1(SwigDirectorregenAppend);
    if (SwigDerivedClassHasMethod("redraw", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateGiView_2(SwigDirectorredraw);
    if (SwigDerivedClassHasMethod("useFinger", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateGiView_3(SwigDirectoruseFinger);
    if (SwigDerivedClassHasMethod("isContextActionsVisible", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateGiView_4(SwigDirectorisContextActionsVisible);
    if (SwigDerivedClassHasMethod("showContextActions", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateGiView_5(SwigDirectorshowContextActions);
    if (SwigDerivedClassHasMethod("hideContextActions", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateGiView_6(SwigDirectorhideContextActions);
    if (SwigDerivedClassHasMethod("commandChanged", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateGiView_7(SwigDirectorcommandChanged);
    if (SwigDerivedClassHasMethod("selectionChanged", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateGiView_8(SwigDirectorselectionChanged);
    if (SwigDerivedClassHasMethod("contentChanged", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateGiView_9(SwigDirectorcontentChanged);
    if (SwigDerivedClassHasMethod("dynamicChanged", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateGiView_10(SwigDirectordynamicChanged);
    if (SwigDerivedClassHasMethod("zoomChanged", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateGiView_11(SwigDirectorzoomChanged);
    if (SwigDerivedClassHasMethod("viewChanged", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateGiView_12(SwigDirectorviewChanged);
    if (SwigDerivedClassHasMethod("shapeWillDelete", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateGiView_13(SwigDirectorshapeWillDelete);
    if (SwigDerivedClassHasMethod("shapeDeleted", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateGiView_14(SwigDirectorshapeDeleted);
    if (SwigDerivedClassHasMethod("shapeDblClick", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateGiView_15(SwigDirectorshapeDblClick);
    if (SwigDerivedClassHasMethod("shapeClicked", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateGiView_16(SwigDirectorshapeClicked);
    if (SwigDerivedClassHasMethod("showMessage", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateGiView_17(SwigDirectorshowMessage);
    if (SwigDerivedClassHasMethod("getLocalizedString", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateGiView_18(SwigDirectorgetLocalizedString);
    touchvgPINVOKE.GiView_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(GiView));
    return hasDerivedMethod;
  }

  private void SwigDirectorregenAll(bool changed) {
    regenAll(changed);
  }

  private void SwigDirectorregenAppend(int sid, int playh) {
    regenAppend(sid, playh);
  }

  private void SwigDirectorredraw(bool changed) {
    redraw(changed);
  }

  private bool SwigDirectoruseFinger() {
    return useFinger();
  }

  private bool SwigDirectorisContextActionsVisible() {
    return isContextActionsVisible();
  }

  private bool SwigDirectorshowContextActions(global::System.IntPtr actions, global::System.IntPtr buttonXY, float x, float y, float w, float h) {
    return showContextActions(new Ints(actions, false), new Floats(buttonXY, false), x, y, w, h);
  }

  private void SwigDirectorhideContextActions() {
    hideContextActions();
  }

  private void SwigDirectorcommandChanged() {
    commandChanged();
  }

  private void SwigDirectorselectionChanged() {
    selectionChanged();
  }

  private void SwigDirectorcontentChanged() {
    contentChanged();
  }

  private void SwigDirectordynamicChanged() {
    dynamicChanged();
  }

  private void SwigDirectorzoomChanged() {
    zoomChanged();
  }

  private void SwigDirectorviewChanged(global::System.IntPtr oldview) {
    viewChanged((oldview == global::System.IntPtr.Zero) ? null : new GiView(oldview, false));
  }

  private void SwigDirectorshapeWillDelete(int sid) {
    shapeWillDelete(sid);
  }

  private void SwigDirectorshapeDeleted(int sid) {
    shapeDeleted(sid);
  }

  private bool SwigDirectorshapeDblClick(int type, int sid, int tag) {
    return shapeDblClick(type, sid, tag);
  }

  private bool SwigDirectorshapeClicked(int type, int sid, int tag, float x, float y) {
    return shapeClicked(type, sid, tag, x, y);
  }

  private void SwigDirectorshowMessage(string text) {
    showMessage(text);
  }

  private void SwigDirectorgetLocalizedString(string name, global::System.IntPtr c) {
    getLocalizedString(name, (c == global::System.IntPtr.Zero) ? null : new MgStringCallback(c, false));
  }

  public delegate void SwigDelegateGiView_0(bool changed);
  public delegate void SwigDelegateGiView_1(int sid, int playh);
  public delegate void SwigDelegateGiView_2(bool changed);
  public delegate bool SwigDelegateGiView_3();
  public delegate bool SwigDelegateGiView_4();
  public delegate bool SwigDelegateGiView_5(global::System.IntPtr actions, global::System.IntPtr buttonXY, float x, float y, float w, float h);
  public delegate void SwigDelegateGiView_6();
  public delegate void SwigDelegateGiView_7();
  public delegate void SwigDelegateGiView_8();
  public delegate void SwigDelegateGiView_9();
  public delegate void SwigDelegateGiView_10();
  public delegate void SwigDelegateGiView_11();
  public delegate void SwigDelegateGiView_12(global::System.IntPtr oldview);
  public delegate void SwigDelegateGiView_13(int sid);
  public delegate void SwigDelegateGiView_14(int sid);
  public delegate bool SwigDelegateGiView_15(int type, int sid, int tag);
  public delegate bool SwigDelegateGiView_16(int type, int sid, int tag, float x, float y);
  public delegate void SwigDelegateGiView_17(string text);
  public delegate void SwigDelegateGiView_18(string name, global::System.IntPtr c);

  private SwigDelegateGiView_0 swigDelegate0;
  private SwigDelegateGiView_1 swigDelegate1;
  private SwigDelegateGiView_2 swigDelegate2;
  private SwigDelegateGiView_3 swigDelegate3;
  private SwigDelegateGiView_4 swigDelegate4;
  private SwigDelegateGiView_5 swigDelegate5;
  private SwigDelegateGiView_6 swigDelegate6;
  private SwigDelegateGiView_7 swigDelegate7;
  private SwigDelegateGiView_8 swigDelegate8;
  private SwigDelegateGiView_9 swigDelegate9;
  private SwigDelegateGiView_10 swigDelegate10;
  private SwigDelegateGiView_11 swigDelegate11;
  private SwigDelegateGiView_12 swigDelegate12;
  private SwigDelegateGiView_13 swigDelegate13;
  private SwigDelegateGiView_14 swigDelegate14;
  private SwigDelegateGiView_15 swigDelegate15;
  private SwigDelegateGiView_16 swigDelegate16;
  private SwigDelegateGiView_17 swigDelegate17;
  private SwigDelegateGiView_18 swigDelegate18;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(bool) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(bool) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(Ints), typeof(Floats), typeof(float), typeof(float), typeof(float), typeof(float) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(GiView) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(int), typeof(int), typeof(int) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(int), typeof(int), typeof(int), typeof(float), typeof(float) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(string), typeof(MgStringCallback) };
}

}
