//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class TestCanvas : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TestCanvas(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TestCanvas obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TestCanvas() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_TestCanvas(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void initRand() {
    touchvgPINVOKE.TestCanvas_initRand();
  }

  public static int randInt(int minv, int maxv) {
    int ret = touchvgPINVOKE.TestCanvas_randInt(minv, maxv);
    return ret;
  }

  public static float randFloat(float minv, float maxv) {
    float ret = touchvgPINVOKE.TestCanvas_randFloat(minv, maxv);
    return ret;
  }

  public static void test(GiCanvas canvas, int bits, int n, bool randStyle) {
    touchvgPINVOKE.TestCanvas_test__SWIG_0(GiCanvas.getCPtr(canvas), bits, n, randStyle);
  }

  public static void test(GiCanvas canvas, int bits, int n) {
    touchvgPINVOKE.TestCanvas_test__SWIG_1(GiCanvas.getCPtr(canvas), bits, n);
  }

  public static void test(GiCanvas canvas, int bits) {
    touchvgPINVOKE.TestCanvas_test__SWIG_2(GiCanvas.getCPtr(canvas), bits);
  }

  public static void testRect(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testRect(GiCanvas.getCPtr(canvas), n);
  }

  public static void testLine(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testLine(GiCanvas.getCPtr(canvas), n);
  }

  public static void testEllipse(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testEllipse(GiCanvas.getCPtr(canvas), n);
  }

  public static void testQuadBezier(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testQuadBezier(GiCanvas.getCPtr(canvas), n);
  }

  public static void testCubicBezier(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testCubicBezier(GiCanvas.getCPtr(canvas), n);
  }

  public static void testPolygon(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testPolygon(GiCanvas.getCPtr(canvas), n);
  }

  public static void testClipPath(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testClipPath(GiCanvas.getCPtr(canvas), n);
  }

  public static void testHandle(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testHandle(GiCanvas.getCPtr(canvas), n);
  }

  public static void testDynCurves(GiCanvas canvas) {
    touchvgPINVOKE.TestCanvas_testDynCurves(GiCanvas.getCPtr(canvas));
  }

  public static void testTextAt(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testTextAt(GiCanvas.getCPtr(canvas), n);
  }

  public static void testRotateText(GiCanvas canvas, int n) {
    touchvgPINVOKE.TestCanvas_testRotateText(GiCanvas.getCPtr(canvas), n);
  }

  public TestCanvas() : this(touchvgPINVOKE.new_TestCanvas(), true) {
  }

  public static readonly int kRect = touchvgPINVOKE.TestCanvas_kRect_get();
  public static readonly int kLine = touchvgPINVOKE.TestCanvas_kLine_get();
  public static readonly int kTextAt = touchvgPINVOKE.TestCanvas_kTextAt_get();
  public static readonly int kEllipse = touchvgPINVOKE.TestCanvas_kEllipse_get();
  public static readonly int kQuadBezier = touchvgPINVOKE.TestCanvas_kQuadBezier_get();
  public static readonly int kCubicBezier = touchvgPINVOKE.TestCanvas_kCubicBezier_get();
  public static readonly int kPolygon = touchvgPINVOKE.TestCanvas_kPolygon_get();
  public static readonly int kClearRect = touchvgPINVOKE.TestCanvas_kClearRect_get();
  public static readonly int kClipPath = touchvgPINVOKE.TestCanvas_kClipPath_get();
  public static readonly int kHandle = touchvgPINVOKE.TestCanvas_kHandle_get();
  public static readonly int kDynCurves = touchvgPINVOKE.TestCanvas_kDynCurves_get();
  public static readonly int kRotateText = touchvgPINVOKE.TestCanvas_kRotateText_get();
  public static readonly int kClearPolygon = touchvgPINVOKE.TestCanvas_kClearPolygon_get();

}

}
