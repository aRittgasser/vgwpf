//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgBaseShape : MgObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MgBaseShape(global::System.IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.MgBaseShape_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgBaseShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgBaseShape() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgBaseShape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MgBaseShape() : this(touchvgPINVOKE.new_MgBaseShape(), true) {
    SwigDirectorConnect();
  }

  public static int Type() {
    int ret = touchvgPINVOKE.MgBaseShape_Type();
    return ret;
  }

  public static Tol minTol() {
    Tol ret = new Tol(touchvgPINVOKE.MgBaseShape_minTol(), false);
    return ret;
  }

  public int toHandle() {
    int ret = touchvgPINVOKE.MgBaseShape_toHandle(swigCPtr);
    return ret;
  }

  public MgBaseShape cloneShape() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgBaseShape_cloneShape(swigCPtr);
    MgBaseShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgBaseShape(cPtr, false);
    return ret;
  }

  public virtual Box2d getExtent() {
    Box2d ret = new Box2d((SwigDerivedClassHasMethod("getExtent", swigMethodTypes7) ? touchvgPINVOKE.MgBaseShape_getExtentSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_getExtent(swigCPtr)), true);
    return ret;
  }

  public virtual int getChangeCount() {
    int ret = (SwigDerivedClassHasMethod("getChangeCount", swigMethodTypes8) ? touchvgPINVOKE.MgBaseShape_getChangeCountSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_getChangeCount(swigCPtr));
    return ret;
  }

  public virtual void resetChangeCount(int count) {
    if (SwigDerivedClassHasMethod("resetChangeCount", swigMethodTypes9)) touchvgPINVOKE.MgBaseShape_resetChangeCountSwigExplicitMgBaseShape(swigCPtr, count); else touchvgPINVOKE.MgBaseShape_resetChangeCount(swigCPtr, count);
  }

  public virtual void afterChanged() {
    if (SwigDerivedClassHasMethod("afterChanged", swigMethodTypes10)) touchvgPINVOKE.MgBaseShape_afterChangedSwigExplicitMgBaseShape(swigCPtr); else touchvgPINVOKE.MgBaseShape_afterChanged(swigCPtr);
  }

  public virtual void update() {
    if (SwigDerivedClassHasMethod("update", swigMethodTypes11)) touchvgPINVOKE.MgBaseShape_updateSwigExplicitMgBaseShape(swigCPtr); else touchvgPINVOKE.MgBaseShape_update(swigCPtr);
  }

  public virtual void transform(Matrix2d mat) {
    if (SwigDerivedClassHasMethod("transform", swigMethodTypes12)) touchvgPINVOKE.MgBaseShape_transformSwigExplicitMgBaseShape(swigCPtr, Matrix2d.getCPtr(mat)); else touchvgPINVOKE.MgBaseShape_transform(swigCPtr, Matrix2d.getCPtr(mat));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    if (SwigDerivedClassHasMethod("clear", swigMethodTypes13)) touchvgPINVOKE.MgBaseShape_clearSwigExplicitMgBaseShape(swigCPtr); else touchvgPINVOKE.MgBaseShape_clear(swigCPtr);
  }

  public virtual void clearCachedData() {
    if (SwigDerivedClassHasMethod("clearCachedData", swigMethodTypes14)) touchvgPINVOKE.MgBaseShape_clearCachedDataSwigExplicitMgBaseShape(swigCPtr); else touchvgPINVOKE.MgBaseShape_clearCachedData(swigCPtr);
  }

  public virtual int getPointCount() {
    int ret = touchvgPINVOKE.MgBaseShape_getPointCount(swigCPtr);
    return ret;
  }

  public virtual Point2d getPoint(int index) {
    Point2d ret = new Point2d(touchvgPINVOKE.MgBaseShape_getPoint(swigCPtr, index), true);
    return ret;
  }

  public virtual void setPoint(int index, Point2d pt) {
    touchvgPINVOKE.MgBaseShape_setPoint(swigCPtr, index, Point2d.getCPtr(pt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool isClosed() {
    bool ret = (SwigDerivedClassHasMethod("isClosed", swigMethodTypes18) ? touchvgPINVOKE.MgBaseShape_isClosedSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_isClosed(swigCPtr));
    return ret;
  }

  public virtual bool isCurve() {
    bool ret = (SwigDerivedClassHasMethod("isCurve", swigMethodTypes19) ? touchvgPINVOKE.MgBaseShape_isCurveSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_isCurve(swigCPtr));
    return ret;
  }

  public virtual float hitTest(Point2d pt, float tol, MgHitResult res) {
    float ret = touchvgPINVOKE.MgBaseShape_hitTest(swigCPtr, Point2d.getCPtr(pt), tol, MgHitResult.getCPtr(res));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float hitTest2(Point2d pt, float tol, Point2d nearpt) {
    float ret = touchvgPINVOKE.MgBaseShape_hitTest2(swigCPtr, Point2d.getCPtr(pt), tol, Point2d.getCPtr(nearpt));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool hitTestBox(Box2d rect) {
    bool ret = (SwigDerivedClassHasMethod("hitTestBox", swigMethodTypes21) ? touchvgPINVOKE.MgBaseShape_hitTestBoxSwigExplicitMgBaseShape(swigCPtr, Box2d.getCPtr(rect)) : touchvgPINVOKE.MgBaseShape_hitTestBox(swigCPtr, Box2d.getCPtr(rect)));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool draw(int mode, GiGraphics gs, GiContext ctx, int segment) {
    bool ret = (SwigDerivedClassHasMethod("draw", swigMethodTypes22) ? touchvgPINVOKE.MgBaseShape_drawSwigExplicitMgBaseShape(swigCPtr, mode, GiGraphics.getCPtr(gs), GiContext.getCPtr(ctx), segment) : touchvgPINVOKE.MgBaseShape_draw(swigCPtr, mode, GiGraphics.getCPtr(gs), GiContext.getCPtr(ctx), segment));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool draw2(MgObject owner, int mode, GiGraphics gs, GiContext ctx, int segment) {
    bool ret = (SwigDerivedClassHasMethod("draw2", swigMethodTypes23) ? touchvgPINVOKE.MgBaseShape_draw2SwigExplicitMgBaseShape(swigCPtr, MgObject.getCPtr(owner), mode, GiGraphics.getCPtr(gs), GiContext.getCPtr(ctx), segment) : touchvgPINVOKE.MgBaseShape_draw2(swigCPtr, MgObject.getCPtr(owner), mode, GiGraphics.getCPtr(gs), GiContext.getCPtr(ctx), segment));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void output(MgPath path) {
    touchvgPINVOKE.MgBaseShape_output(swigCPtr, MgPath.getCPtr(path));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public MgPath getPath() {
    MgPath ret = new MgPath(touchvgPINVOKE.MgBaseShape_getPath(swigCPtr), true);
    return ret;
  }

  public virtual bool save(MgStorage s) {
    bool ret = (SwigDerivedClassHasMethod("save", swigMethodTypes25) ? touchvgPINVOKE.MgBaseShape_saveSwigExplicitMgBaseShape(swigCPtr, MgStorage.getCPtr(s)) : touchvgPINVOKE.MgBaseShape_save(swigCPtr, MgStorage.getCPtr(s)));
    return ret;
  }

  public virtual bool load(MgShapeFactory factory, MgStorage s) {
    bool ret = (SwigDerivedClassHasMethod("load", swigMethodTypes26) ? touchvgPINVOKE.MgBaseShape_loadSwigExplicitMgBaseShape(swigCPtr, MgShapeFactory.getCPtr(factory), MgStorage.getCPtr(s)) : touchvgPINVOKE.MgBaseShape_load(swigCPtr, MgShapeFactory.getCPtr(factory), MgStorage.getCPtr(s)));
    return ret;
  }

  public virtual int getHandleCount() {
    int ret = (SwigDerivedClassHasMethod("getHandleCount", swigMethodTypes27) ? touchvgPINVOKE.MgBaseShape_getHandleCountSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_getHandleCount(swigCPtr));
    return ret;
  }

  public virtual Point2d getHandlePoint(int index) {
    Point2d ret = new Point2d((SwigDerivedClassHasMethod("getHandlePoint", swigMethodTypes28) ? touchvgPINVOKE.MgBaseShape_getHandlePointSwigExplicitMgBaseShape(swigCPtr, index) : touchvgPINVOKE.MgBaseShape_getHandlePoint(swigCPtr, index)), true);
    return ret;
  }

  public virtual bool setHandlePoint(int index, Point2d pt, float tol) {
    bool ret = (SwigDerivedClassHasMethod("setHandlePoint", swigMethodTypes29) ? touchvgPINVOKE.MgBaseShape_setHandlePointSwigExplicitMgBaseShape(swigCPtr, index, Point2d.getCPtr(pt), tol) : touchvgPINVOKE.MgBaseShape_setHandlePoint(swigCPtr, index, Point2d.getCPtr(pt), tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isHandleFixed(int index) {
    bool ret = (SwigDerivedClassHasMethod("isHandleFixed", swigMethodTypes30) ? touchvgPINVOKE.MgBaseShape_isHandleFixedSwigExplicitMgBaseShape(swigCPtr, index) : touchvgPINVOKE.MgBaseShape_isHandleFixed(swigCPtr, index));
    return ret;
  }

  public virtual int getHandleType(int index) {
    int ret = (SwigDerivedClassHasMethod("getHandleType", swigMethodTypes31) ? touchvgPINVOKE.MgBaseShape_getHandleTypeSwigExplicitMgBaseShape(swigCPtr, index) : touchvgPINVOKE.MgBaseShape_getHandleType(swigCPtr, index));
    return ret;
  }

  public virtual bool offset(Vector2d vec, int segment) {
    bool ret = (SwigDerivedClassHasMethod("offset", swigMethodTypes32) ? touchvgPINVOKE.MgBaseShape_offsetSwigExplicitMgBaseShape(swigCPtr, Vector2d.getCPtr(vec), segment) : touchvgPINVOKE.MgBaseShape_offset(swigCPtr, Vector2d.getCPtr(vec), segment));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getFlag(MgShapeBit bit) {
    bool ret = touchvgPINVOKE.MgBaseShape_getFlag(swigCPtr, (int)bit);
    return ret;
  }

  public virtual void setFlag(MgShapeBit bit, bool on) {
    if (SwigDerivedClassHasMethod("setFlag", swigMethodTypes33)) touchvgPINVOKE.MgBaseShape_setFlagSwigExplicitMgBaseShape(swigCPtr, (int)bit, on); else touchvgPINVOKE.MgBaseShape_setFlag(swigCPtr, (int)bit, on);
  }

  public override void copy(MgObject src) {
    if (SwigDerivedClassHasMethod("copy", swigMethodTypes1)) touchvgPINVOKE.MgBaseShape_copySwigExplicitMgBaseShape(swigCPtr, MgObject.getCPtr(src)); else touchvgPINVOKE.MgBaseShape_copy(swigCPtr, MgObject.getCPtr(src));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool equals(MgObject src) {
    bool ret = (SwigDerivedClassHasMethod("equals", swigMethodTypes4) ? touchvgPINVOKE.MgBaseShape_equalsSwigExplicitMgBaseShape(swigCPtr, MgObject.getCPtr(src)) : touchvgPINVOKE.MgBaseShape_equals(swigCPtr, MgObject.getCPtr(src)));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool isKindOf(int type) {
    bool ret = (SwigDerivedClassHasMethod("isKindOf", swigMethodTypes6) ? touchvgPINVOKE.MgBaseShape_isKindOfSwigExplicitMgBaseShape(swigCPtr, type) : touchvgPINVOKE.MgBaseShape_isKindOf(swigCPtr, type));
    return ret;
  }

  public override void addRef() {
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes3)) touchvgPINVOKE.MgBaseShape_addRefSwigExplicitMgBaseShape(swigCPtr); else touchvgPINVOKE.MgBaseShape_addRef(swigCPtr);
  }

  public void setExtent(Box2d rect) {
    touchvgPINVOKE.MgBaseShape_setExtent(swigCPtr, Box2d.getCPtr(rect));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setOwner(MgObject owner) {
    if (SwigDerivedClassHasMethod("setOwner", swigMethodTypes34)) touchvgPINVOKE.MgBaseShape_setOwnerSwigExplicitMgBaseShape(swigCPtr, MgObject.getCPtr(owner)); else touchvgPINVOKE.MgBaseShape_setOwner(swigCPtr, MgObject.getCPtr(owner));
  }

  public virtual int getSubType() {
    int ret = (SwigDerivedClassHasMethod("getSubType", swigMethodTypes35) ? touchvgPINVOKE.MgBaseShape_getSubTypeSwigExplicitMgBaseShape(swigCPtr) : touchvgPINVOKE.MgBaseShape_getSubType(swigCPtr));
    return ret;
  }

  public bool isVisible() {
    bool ret = touchvgPINVOKE.MgBaseShape_isVisible(swigCPtr);
    return ret;
  }

  public bool isLocked() {
    bool ret = touchvgPINVOKE.MgBaseShape_isLocked(swigCPtr);
    return ret;
  }

  public static float linesHit(int n, Point2d points, bool closed, Point2d pt, float tol, MgHitResult res) {
    float ret = touchvgPINVOKE.MgBaseShape_linesHit(n, Point2d.getCPtr(points), closed, Point2d.getCPtr(pt), tol, MgHitResult.getCPtr(res));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("clone", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMgBaseShape_0(SwigDirectorclone);
    if (SwigDerivedClassHasMethod("copy", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMgBaseShape_1(SwigDirectorcopy);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMgBaseShape_2(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateMgBaseShape_3(SwigDirectoraddRef);
    if (SwigDerivedClassHasMethod("equals", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateMgBaseShape_4(SwigDirectorequals);
    if (SwigDerivedClassHasMethod("getType", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateMgBaseShape_5(SwigDirectorgetType);
    if (SwigDerivedClassHasMethod("isKindOf", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateMgBaseShape_6(SwigDirectorisKindOf);
    if (SwigDerivedClassHasMethod("getExtent", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateMgBaseShape_7(SwigDirectorgetExtent);
    if (SwigDerivedClassHasMethod("getChangeCount", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateMgBaseShape_8(SwigDirectorgetChangeCount);
    if (SwigDerivedClassHasMethod("resetChangeCount", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateMgBaseShape_9(SwigDirectorresetChangeCount);
    if (SwigDerivedClassHasMethod("afterChanged", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateMgBaseShape_10(SwigDirectorafterChanged);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateMgBaseShape_11(SwigDirectorupdate);
    if (SwigDerivedClassHasMethod("transform", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateMgBaseShape_12(SwigDirectortransform);
    if (SwigDerivedClassHasMethod("clear", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateMgBaseShape_13(SwigDirectorclear);
    if (SwigDerivedClassHasMethod("clearCachedData", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateMgBaseShape_14(SwigDirectorclearCachedData);
    if (SwigDerivedClassHasMethod("getPointCount", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateMgBaseShape_15(SwigDirectorgetPointCount);
    if (SwigDerivedClassHasMethod("getPoint", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateMgBaseShape_16(SwigDirectorgetPoint);
    if (SwigDerivedClassHasMethod("setPoint", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateMgBaseShape_17(SwigDirectorsetPoint);
    if (SwigDerivedClassHasMethod("isClosed", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateMgBaseShape_18(SwigDirectorisClosed);
    if (SwigDerivedClassHasMethod("isCurve", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateMgBaseShape_19(SwigDirectorisCurve);
    if (SwigDerivedClassHasMethod("hitTest", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateMgBaseShape_20(SwigDirectorhitTest);
    if (SwigDerivedClassHasMethod("hitTestBox", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateMgBaseShape_21(SwigDirectorhitTestBox);
    if (SwigDerivedClassHasMethod("draw", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateMgBaseShape_22(SwigDirectordraw);
    if (SwigDerivedClassHasMethod("draw2", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateMgBaseShape_23(SwigDirectordraw2);
    if (SwigDerivedClassHasMethod("output", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateMgBaseShape_24(SwigDirectoroutput);
    if (SwigDerivedClassHasMethod("save", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateMgBaseShape_25(SwigDirectorsave);
    if (SwigDerivedClassHasMethod("load", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateMgBaseShape_26(SwigDirectorload);
    if (SwigDerivedClassHasMethod("getHandleCount", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateMgBaseShape_27(SwigDirectorgetHandleCount);
    if (SwigDerivedClassHasMethod("getHandlePoint", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateMgBaseShape_28(SwigDirectorgetHandlePoint);
    if (SwigDerivedClassHasMethod("setHandlePoint", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateMgBaseShape_29(SwigDirectorsetHandlePoint);
    if (SwigDerivedClassHasMethod("isHandleFixed", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateMgBaseShape_30(SwigDirectorisHandleFixed);
    if (SwigDerivedClassHasMethod("getHandleType", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateMgBaseShape_31(SwigDirectorgetHandleType);
    if (SwigDerivedClassHasMethod("offset", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateMgBaseShape_32(SwigDirectoroffset);
    if (SwigDerivedClassHasMethod("setFlag", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateMgBaseShape_33(SwigDirectorsetFlag);
    if (SwigDerivedClassHasMethod("setOwner", swigMethodTypes34))
      swigDelegate34 = new SwigDelegateMgBaseShape_34(SwigDirectorsetOwner);
    if (SwigDerivedClassHasMethod("getSubType", swigMethodTypes35))
      swigDelegate35 = new SwigDelegateMgBaseShape_35(SwigDirectorgetSubType);
    touchvgPINVOKE.MgBaseShape_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33, swigDelegate34, swigDelegate35);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MgBaseShape));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorclone() {
    return MgObject.getCPtr(clone()).Handle;
  }

  private void SwigDirectorcopy(global::System.IntPtr src) {
    copy(new MgObject(src, false));
  }

  private void SwigDirectorrelease() {
    release();
  }

  private void SwigDirectoraddRef() {
    addRef();
  }

  private bool SwigDirectorequals(global::System.IntPtr src) {
    return equals(new MgObject(src, false));
  }

  private int SwigDirectorgetType() {
    return getType();
  }

  private bool SwigDirectorisKindOf(int type) {
    return isKindOf(type);
  }

  private global::System.IntPtr SwigDirectorgetExtent() {
    return Box2d.getCPtr(getExtent()).Handle;
  }

  private int SwigDirectorgetChangeCount() {
    return getChangeCount();
  }

  private void SwigDirectorresetChangeCount(int count) {
    resetChangeCount(count);
  }

  private void SwigDirectorafterChanged() {
    afterChanged();
  }

  private void SwigDirectorupdate() {
    update();
  }

  private void SwigDirectortransform(global::System.IntPtr mat) {
    transform(new Matrix2d(mat, false));
  }

  private void SwigDirectorclear() {
    clear();
  }

  private void SwigDirectorclearCachedData() {
    clearCachedData();
  }

  private int SwigDirectorgetPointCount() {
    return getPointCount();
  }

  private global::System.IntPtr SwigDirectorgetPoint(int index) {
    return Point2d.getCPtr(getPoint(index)).Handle;
  }

  private void SwigDirectorsetPoint(int index, global::System.IntPtr pt) {
    setPoint(index, new Point2d(pt, false));
  }

  private bool SwigDirectorisClosed() {
    return isClosed();
  }

  private bool SwigDirectorisCurve() {
    return isCurve();
  }

  private float SwigDirectorhitTest(global::System.IntPtr pt, float tol, global::System.IntPtr res) {
    return hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }

  private bool SwigDirectorhitTestBox(global::System.IntPtr rect) {
    return hitTestBox(new Box2d(rect, false));
  }

  private bool SwigDirectordraw(int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment) {
    return draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }

  private bool SwigDirectordraw2(global::System.IntPtr owner, int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment) {
    return draw2((owner == global::System.IntPtr.Zero) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }

  private void SwigDirectoroutput(global::System.IntPtr path) {
    output(new MgPath(path, false));
  }

  private bool SwigDirectorsave(global::System.IntPtr s) {
    return save((s == global::System.IntPtr.Zero) ? null : new MgStorage(s, false));
  }

  private bool SwigDirectorload(global::System.IntPtr factory, global::System.IntPtr s) {
    return load((factory == global::System.IntPtr.Zero) ? null : new MgShapeFactory(factory, false), (s == global::System.IntPtr.Zero) ? null : new MgStorage(s, false));
  }

  private int SwigDirectorgetHandleCount() {
    return getHandleCount();
  }

  private global::System.IntPtr SwigDirectorgetHandlePoint(int index) {
    return Point2d.getCPtr(getHandlePoint(index)).Handle;
  }

  private bool SwigDirectorsetHandlePoint(int index, global::System.IntPtr pt, float tol) {
    return setHandlePoint(index, new Point2d(pt, false), tol);
  }

  private bool SwigDirectorisHandleFixed(int index) {
    return isHandleFixed(index);
  }

  private int SwigDirectorgetHandleType(int index) {
    return getHandleType(index);
  }

  private bool SwigDirectoroffset(global::System.IntPtr vec, int segment) {
    return offset(new Vector2d(vec, false), segment);
  }

  private void SwigDirectorsetFlag(int bit, bool on) {
    setFlag((MgShapeBit)bit, on);
  }

  private void SwigDirectorsetOwner(global::System.IntPtr owner) {
    setOwner((owner == global::System.IntPtr.Zero) ? null : new MgObject(owner, false));
  }

  private int SwigDirectorgetSubType() {
    return getSubType();
  }

  public delegate global::System.IntPtr SwigDelegateMgBaseShape_0();
  public delegate void SwigDelegateMgBaseShape_1(global::System.IntPtr src);
  public delegate void SwigDelegateMgBaseShape_2();
  public delegate void SwigDelegateMgBaseShape_3();
  public delegate bool SwigDelegateMgBaseShape_4(global::System.IntPtr src);
  public delegate int SwigDelegateMgBaseShape_5();
  public delegate bool SwigDelegateMgBaseShape_6(int type);
  public delegate global::System.IntPtr SwigDelegateMgBaseShape_7();
  public delegate int SwigDelegateMgBaseShape_8();
  public delegate void SwigDelegateMgBaseShape_9(int count);
  public delegate void SwigDelegateMgBaseShape_10();
  public delegate void SwigDelegateMgBaseShape_11();
  public delegate void SwigDelegateMgBaseShape_12(global::System.IntPtr mat);
  public delegate void SwigDelegateMgBaseShape_13();
  public delegate void SwigDelegateMgBaseShape_14();
  public delegate int SwigDelegateMgBaseShape_15();
  public delegate global::System.IntPtr SwigDelegateMgBaseShape_16(int index);
  public delegate void SwigDelegateMgBaseShape_17(int index, global::System.IntPtr pt);
  public delegate bool SwigDelegateMgBaseShape_18();
  public delegate bool SwigDelegateMgBaseShape_19();
  public delegate float SwigDelegateMgBaseShape_20(global::System.IntPtr pt, float tol, global::System.IntPtr res);
  public delegate bool SwigDelegateMgBaseShape_21(global::System.IntPtr rect);
  public delegate bool SwigDelegateMgBaseShape_22(int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment);
  public delegate bool SwigDelegateMgBaseShape_23(global::System.IntPtr owner, int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment);
  public delegate void SwigDelegateMgBaseShape_24(global::System.IntPtr path);
  public delegate bool SwigDelegateMgBaseShape_25(global::System.IntPtr s);
  public delegate bool SwigDelegateMgBaseShape_26(global::System.IntPtr factory, global::System.IntPtr s);
  public delegate int SwigDelegateMgBaseShape_27();
  public delegate global::System.IntPtr SwigDelegateMgBaseShape_28(int index);
  public delegate bool SwigDelegateMgBaseShape_29(int index, global::System.IntPtr pt, float tol);
  public delegate bool SwigDelegateMgBaseShape_30(int index);
  public delegate int SwigDelegateMgBaseShape_31(int index);
  public delegate bool SwigDelegateMgBaseShape_32(global::System.IntPtr vec, int segment);
  public delegate void SwigDelegateMgBaseShape_33(int bit, bool on);
  public delegate void SwigDelegateMgBaseShape_34(global::System.IntPtr owner);
  public delegate int SwigDelegateMgBaseShape_35();

  private SwigDelegateMgBaseShape_0 swigDelegate0;
  private SwigDelegateMgBaseShape_1 swigDelegate1;
  private SwigDelegateMgBaseShape_2 swigDelegate2;
  private SwigDelegateMgBaseShape_3 swigDelegate3;
  private SwigDelegateMgBaseShape_4 swigDelegate4;
  private SwigDelegateMgBaseShape_5 swigDelegate5;
  private SwigDelegateMgBaseShape_6 swigDelegate6;
  private SwigDelegateMgBaseShape_7 swigDelegate7;
  private SwigDelegateMgBaseShape_8 swigDelegate8;
  private SwigDelegateMgBaseShape_9 swigDelegate9;
  private SwigDelegateMgBaseShape_10 swigDelegate10;
  private SwigDelegateMgBaseShape_11 swigDelegate11;
  private SwigDelegateMgBaseShape_12 swigDelegate12;
  private SwigDelegateMgBaseShape_13 swigDelegate13;
  private SwigDelegateMgBaseShape_14 swigDelegate14;
  private SwigDelegateMgBaseShape_15 swigDelegate15;
  private SwigDelegateMgBaseShape_16 swigDelegate16;
  private SwigDelegateMgBaseShape_17 swigDelegate17;
  private SwigDelegateMgBaseShape_18 swigDelegate18;
  private SwigDelegateMgBaseShape_19 swigDelegate19;
  private SwigDelegateMgBaseShape_20 swigDelegate20;
  private SwigDelegateMgBaseShape_21 swigDelegate21;
  private SwigDelegateMgBaseShape_22 swigDelegate22;
  private SwigDelegateMgBaseShape_23 swigDelegate23;
  private SwigDelegateMgBaseShape_24 swigDelegate24;
  private SwigDelegateMgBaseShape_25 swigDelegate25;
  private SwigDelegateMgBaseShape_26 swigDelegate26;
  private SwigDelegateMgBaseShape_27 swigDelegate27;
  private SwigDelegateMgBaseShape_28 swigDelegate28;
  private SwigDelegateMgBaseShape_29 swigDelegate29;
  private SwigDelegateMgBaseShape_30 swigDelegate30;
  private SwigDelegateMgBaseShape_31 swigDelegate31;
  private SwigDelegateMgBaseShape_32 swigDelegate32;
  private SwigDelegateMgBaseShape_33 swigDelegate33;
  private SwigDelegateMgBaseShape_34 swigDelegate34;
  private SwigDelegateMgBaseShape_35 swigDelegate35;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(Matrix2d) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(int), typeof(Point2d) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(Point2d), typeof(float), typeof(MgHitResult) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(Box2d) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(int), typeof(GiGraphics), typeof(GiContext), typeof(int) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(MgObject), typeof(int), typeof(GiGraphics), typeof(GiContext), typeof(int) };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(MgPath) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(MgStorage) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(MgShapeFactory), typeof(MgStorage) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes28 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes29 = new global::System.Type[] { typeof(int), typeof(Point2d), typeof(float) };
  private static global::System.Type[] swigMethodTypes30 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes31 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes32 = new global::System.Type[] { typeof(Vector2d), typeof(int) };
  private static global::System.Type[] swigMethodTypes33 = new global::System.Type[] { typeof(MgShapeBit), typeof(bool) };
  private static global::System.Type[] swigMethodTypes34 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes35 = new global::System.Type[] {  };
}

}
