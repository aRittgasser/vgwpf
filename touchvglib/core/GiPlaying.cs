//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class GiPlaying : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GiPlaying(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GiPlaying obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static GiPlaying fromHandle(int h) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiPlaying_fromHandle(h);
    GiPlaying ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiPlaying(cPtr, false);
    return ret;
  }

  public int toHandle() {
    int ret = touchvgPINVOKE.GiPlaying_toHandle(swigCPtr);
    return ret;
  }

  public static GiPlaying create(MgCoreView v, int tag, bool doubleSided) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiPlaying_create__SWIG_0(MgCoreView.getCPtr(v), tag, doubleSided);
    GiPlaying ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiPlaying(cPtr, false);
    return ret;
  }

  public static GiPlaying create(MgCoreView v, int tag) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiPlaying_create__SWIG_1(MgCoreView.getCPtr(v), tag);
    GiPlaying ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiPlaying(cPtr, false);
    return ret;
  }

  public void release(MgCoreView v) {
    touchvgPINVOKE.GiPlaying_release(swigCPtr, MgCoreView.getCPtr(v));
  }

  public void clear() {
    touchvgPINVOKE.GiPlaying_clear(swigCPtr);
  }

  public int getTag() {
    int ret = touchvgPINVOKE.GiPlaying_getTag(swigCPtr);
    return ret;
  }

  public int acquireFrontDoc() {
    int ret = touchvgPINVOKE.GiPlaying_acquireFrontDoc(swigCPtr);
    return ret;
  }

  public static void releaseDoc(int doc) {
    touchvgPINVOKE.GiPlaying_releaseDoc(doc);
  }

  public MgShapeDoc getBackDoc() {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiPlaying_getBackDoc(swigCPtr);
    MgShapeDoc ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapeDoc(cPtr, false);
    return ret;
  }

  public void submitBackDoc() {
    touchvgPINVOKE.GiPlaying_submitBackDoc(swigCPtr);
  }

  public int acquireFrontShapes() {
    int ret = touchvgPINVOKE.GiPlaying_acquireFrontShapes(swigCPtr);
    return ret;
  }

  public static void releaseShapes(int shapes) {
    touchvgPINVOKE.GiPlaying_releaseShapes(shapes);
  }

  public int getBackShapesHandle(bool needClear) {
    int ret = touchvgPINVOKE.GiPlaying_getBackShapesHandle(swigCPtr, needClear);
    return ret;
  }

  public MgShapes getBackShapes(bool needClear) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiPlaying_getBackShapes(swigCPtr, needClear);
    MgShapes ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapes(cPtr, false);
    return ret;
  }

  public void submitBackShapes() {
    touchvgPINVOKE.GiPlaying_submitBackShapes(swigCPtr);
  }

  public void stop() {
    touchvgPINVOKE.GiPlaying_stop(swigCPtr);
  }

  public bool isStopping() {
    bool ret = touchvgPINVOKE.GiPlaying_isStopping(swigCPtr);
    return ret;
  }

  public static readonly int kDrawingTag = touchvgPINVOKE.GiPlaying_kDrawingTag_get();
  public static readonly int kPlayingTag = touchvgPINVOKE.GiPlaying_kPlayingTag_get();

}

}
