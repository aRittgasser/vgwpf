//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class GiCoreViewData : MgView {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal GiCoreViewData(global::System.IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.GiCoreViewData_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GiCoreViewData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~GiCoreViewData() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_GiCoreViewData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public GiPlaying drawing {
    set {
      touchvgPINVOKE.GiCoreViewData_drawing_set(swigCPtr, GiPlaying.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = touchvgPINVOKE.GiCoreViewData_drawing_get(swigCPtr);
      GiPlaying ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiPlaying(cPtr, false);
      return ret;
    } 
  }

  public MgShapeDoc backDoc {
    set {
      touchvgPINVOKE.GiCoreViewData_backDoc_set(swigCPtr, MgShapeDoc.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = touchvgPINVOKE.GiCoreViewData_backDoc_get(swigCPtr);
      MgShapeDoc ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapeDoc(cPtr, false);
      return ret;
    } 
  }

  public GiPlayShapes play {
    set {
      touchvgPINVOKE.GiCoreViewData_play_set(swigCPtr, GiPlayShapes.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = touchvgPINVOKE.GiCoreViewData_play_get(swigCPtr);
      GiPlayShapes ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiPlayShapes(cPtr, false);
      return ret;
    } 
  }

  public virtual void submitBackXform() {
    touchvgPINVOKE.GiCoreViewData_submitBackXform(swigCPtr);
  }

  public new static GiCoreViewData fromHandle(int h) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiCoreViewData_fromHandle(h);
    GiCoreViewData ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiCoreViewData(cPtr, false);
    return ret;
  }

  public MgRecordShapes recorder(bool forUndo) {
    global::System.IntPtr cPtr = touchvgPINVOKE.GiCoreViewData_recorder(swigCPtr, forUndo);
    MgRecordShapes ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgRecordShapes(cPtr, false);
    return ret;
  }

  public void setRecorder(bool forUndo, MgRecordShapes p) {
    touchvgPINVOKE.GiCoreViewData_setRecorder(swigCPtr, forUndo, MgRecordShapes.getCPtr(p));
  }

  public int getPlayingCount() {
    int ret = touchvgPINVOKE.GiCoreViewData_getPlayingCount(swigCPtr);
    return ret;
  }

  public int acquireFrontDoc(int index) {
    int ret = touchvgPINVOKE.GiCoreViewData_acquireFrontDoc(swigCPtr, index);
    return ret;
  }

  public int acquireFrontShapes(int index) {
    int ret = touchvgPINVOKE.GiCoreViewData_acquireFrontShapes(swigCPtr, index);
    return ret;
  }

  public void addPlaying(GiPlaying p) {
    touchvgPINVOKE.GiCoreViewData_addPlaying(swigCPtr, GiPlaying.getCPtr(p));
  }

  public void removePlaying(GiPlaying p) {
    touchvgPINVOKE.GiCoreViewData_removePlaying(swigCPtr, GiPlaying.getCPtr(p));
  }

}

}
