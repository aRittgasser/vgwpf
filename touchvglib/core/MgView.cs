//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgView : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgView(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgView obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgView() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgView(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static MgView fromHandle(int h) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_fromHandle(h);
    MgView ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgView(cPtr, false);
    return ret;
  }

  public int toHandle() {
    int ret = touchvgPINVOKE.MgView_toHandle(swigCPtr);
    return ret;
  }

  public virtual MgMotion motion() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_motion(swigCPtr);
    MgMotion ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgMotion(cPtr, false);
    return ret;
  }

  public virtual MgCmdManager cmds() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_cmds(swigCPtr);
    MgCmdManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgCmdManager(cPtr, false);
    return ret;
  }

  public virtual GiTransform xform() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_xform(swigCPtr);
    GiTransform ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiTransform(cPtr, false);
    return ret;
  }

  public virtual MgShapeDoc doc() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_doc(swigCPtr);
    MgShapeDoc ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapeDoc(cPtr, false);
    return ret;
  }

  public virtual MgShapes shapes() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_shapes(swigCPtr);
    MgShapes ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapes(cPtr, false);
    return ret;
  }

  public virtual GiContext context() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_context(swigCPtr);
    GiContext ret = (cPtr == global::System.IntPtr.Zero) ? null : new GiContext(cPtr, false);
    return ret;
  }

  public virtual Matrix2d modelTransform() {
    Matrix2d ret = new Matrix2d(touchvgPINVOKE.MgView_modelTransform(swigCPtr), false);
    return ret;
  }

  public virtual MgShapeFactory getShapeFactory() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getShapeFactory(swigCPtr);
    MgShapeFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapeFactory(cPtr, false);
    return ret;
  }

  public virtual MgShape createShapeCtx(int type, GiContext ctx) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_createShapeCtx__SWIG_0(swigCPtr, type, GiContext.getCPtr(ctx));
    MgShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShape(cPtr, false);
    return ret;
  }

  public virtual MgShape createShapeCtx(int type) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_createShapeCtx__SWIG_1(swigCPtr, type);
    MgShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShape(cPtr, false);
    return ret;
  }

  public virtual MgSnap getSnap() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getSnap(swigCPtr);
    MgSnap ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgSnap(cPtr, false);
    return ret;
  }

  public virtual MgActionDispatcher getAction() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getAction(swigCPtr);
    MgActionDispatcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgActionDispatcher(cPtr, false);
    return ret;
  }

  public virtual CmdSubject getCmdSubject() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getCmdSubject(swigCPtr);
    CmdSubject ret = (cPtr == global::System.IntPtr.Zero) ? null : new CmdSubject(cPtr, false);
    return ret;
  }

  public virtual MgSelection getSelection() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getSelection(swigCPtr);
    MgSelection ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgSelection(cPtr, false);
    return ret;
  }

  public virtual bool setCurrentShapes(MgShapes shapes) {
    bool ret = touchvgPINVOKE.MgView_setCurrentShapes(swigCPtr, MgShapes.getCPtr(shapes));
    return ret;
  }

  public virtual bool toSelectCommand() {
    bool ret = touchvgPINVOKE.MgView_toSelectCommand(swigCPtr);
    return ret;
  }

  public virtual int getNewShapeID() {
    int ret = touchvgPINVOKE.MgView_getNewShapeID(swigCPtr);
    return ret;
  }

  public virtual void setNewShapeID(int sid) {
    touchvgPINVOKE.MgView_setNewShapeID(swigCPtr, sid);
  }

  public virtual MgCommand getCommand() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_getCommand(swigCPtr);
    MgCommand ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgCommand(cPtr, false);
    return ret;
  }

  public virtual MgCommand findCommand(string name) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgView_findCommand(swigCPtr, name);
    MgCommand ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgCommand(cPtr, false);
    return ret;
  }

  public virtual bool setCommand(string name, string arg1) {
    bool ret = touchvgPINVOKE.MgView_setCommand__SWIG_0(swigCPtr, name, arg1);
    return ret;
  }

  public virtual bool setCommand(string name) {
    bool ret = touchvgPINVOKE.MgView_setCommand__SWIG_1(swigCPtr, name);
    return ret;
  }

  public virtual bool isReadOnly() {
    bool ret = touchvgPINVOKE.MgView_isReadOnly(swigCPtr);
    return ret;
  }

  public virtual bool isCommand(string name) {
    bool ret = touchvgPINVOKE.MgView_isCommand(swigCPtr, name);
    return ret;
  }

  public virtual void regenAll(bool changed) {
    touchvgPINVOKE.MgView_regenAll(swigCPtr, changed);
  }

  public virtual void regenAppend(int sid, int playh) {
    touchvgPINVOKE.MgView_regenAppend__SWIG_0(swigCPtr, sid, playh);
  }

  public virtual void regenAppend(int sid) {
    touchvgPINVOKE.MgView_regenAppend__SWIG_1(swigCPtr, sid);
  }

  public virtual void redraw(bool changed) {
    touchvgPINVOKE.MgView_redraw__SWIG_0(swigCPtr, changed);
  }

  public virtual void redraw() {
    touchvgPINVOKE.MgView_redraw__SWIG_1(swigCPtr);
  }

  public virtual bool useFinger() {
    bool ret = touchvgPINVOKE.MgView_useFinger(swigCPtr);
    return ret;
  }

  public virtual void commandChanged() {
    touchvgPINVOKE.MgView_commandChanged(swigCPtr);
  }

  public virtual void selectionChanged() {
    touchvgPINVOKE.MgView_selectionChanged(swigCPtr);
  }

  public virtual void dynamicChanged() {
    touchvgPINVOKE.MgView_dynamicChanged(swigCPtr);
  }

  public virtual bool shapeWillAdded(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeWillAdded(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual void shapeAdded(MgShape shape) {
    touchvgPINVOKE.MgView_shapeAdded(swigCPtr, MgShape.getCPtr(shape));
  }

  public virtual bool shapeWillDeleted(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeWillDeleted(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual int removeShape(MgShape shape) {
    int ret = touchvgPINVOKE.MgView_removeShape(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeCanRotated(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeCanRotated(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeCanTransform(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeCanTransform(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeCanUnlock(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeCanUnlock(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeCanUngroup(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeCanUngroup(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeCanMovedHandle(MgShape shape, int index) {
    bool ret = touchvgPINVOKE.MgView_shapeCanMovedHandle(swigCPtr, MgShape.getCPtr(shape), index);
    return ret;
  }

  public virtual void shapeMoved(MgShape shape, int segment) {
    touchvgPINVOKE.MgView_shapeMoved(swigCPtr, MgShape.getCPtr(shape), segment);
  }

  public virtual bool shapeWillChanged(MgShape shape, MgShape oldsp) {
    bool ret = touchvgPINVOKE.MgView_shapeWillChanged(swigCPtr, MgShape.getCPtr(shape), MgShape.getCPtr(oldsp));
    return ret;
  }

  public virtual void shapeChanged(MgShape shape) {
    touchvgPINVOKE.MgView_shapeChanged(swigCPtr, MgShape.getCPtr(shape));
  }

  public virtual bool shapeDblClick(MgShape shape) {
    bool ret = touchvgPINVOKE.MgView_shapeDblClick(swigCPtr, MgShape.getCPtr(shape));
    return ret;
  }

  public virtual bool shapeClicked(MgShape shape, float x, float y) {
    bool ret = touchvgPINVOKE.MgView_shapeClicked(swigCPtr, MgShape.getCPtr(shape), x, y);
    return ret;
  }

  public virtual void showMessage(string text) {
    touchvgPINVOKE.MgView_showMessage(swigCPtr, text);
  }

  public virtual void getLocalizedString(string name, MgStringCallback c) {
    touchvgPINVOKE.MgView_getLocalizedString(swigCPtr, name, MgStringCallback.getCPtr(c));
  }

  public virtual bool isContextActionsVisible() {
    bool ret = touchvgPINVOKE.MgView_isContextActionsVisible(swigCPtr);
    return ret;
  }

  public virtual void hideContextActions() {
    touchvgPINVOKE.MgView_hideContextActions(swigCPtr);
  }

  public virtual bool getOptionBool(string name, bool defValue) {
    bool ret = touchvgPINVOKE.MgView_getOptionBool(swigCPtr, name, defValue);
    return ret;
  }

  public virtual int getOptionInt(string name, int defValue) {
    int ret = touchvgPINVOKE.MgView_getOptionInt(swigCPtr, name, defValue);
    return ret;
  }

  public virtual float getOptionFloat(string name, float defValue) {
    float ret = touchvgPINVOKE.MgView_getOptionFloat(swigCPtr, name, defValue);
    return ret;
  }

  public virtual void setOptionBool(string name, bool value) {
    touchvgPINVOKE.MgView_setOptionBool(swigCPtr, name, value);
  }

  public virtual void setOptionInt(string name, int value) {
    touchvgPINVOKE.MgView_setOptionInt(swigCPtr, name, value);
  }

  public virtual void setOptionFloat(string name, float value) {
    touchvgPINVOKE.MgView_setOptionFloat(swigCPtr, name, value);
  }

  public virtual void setOptionString(string name, string text) {
    touchvgPINVOKE.MgView_setOptionString(swigCPtr, name, text);
  }

}

}
