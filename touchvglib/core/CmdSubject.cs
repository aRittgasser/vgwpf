//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class CmdSubject : CmdObserver {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CmdSubject(global::System.IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.CmdSubject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CmdSubject obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CmdSubject() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_CmdSubject(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void registerObserver(CmdObserver observer) {
    touchvgPINVOKE.CmdSubject_registerObserver(swigCPtr, CmdObserver.getCPtr(observer));
  }

  public virtual void unregisterObserver(CmdObserver observer) {
    touchvgPINVOKE.CmdSubject_unregisterObserver(swigCPtr, CmdObserver.getCPtr(observer));
  }

  public virtual bool registerNamedObserver(string name, CmdObserver observer) {
    bool ret = touchvgPINVOKE.CmdSubject_registerNamedObserver(swigCPtr, name, CmdObserver.getCPtr(observer));
    return ret;
  }

  public virtual CmdObserver findNamedObserver(string name) {
    global::System.IntPtr cPtr = touchvgPINVOKE.CmdSubject_findNamedObserver(swigCPtr, name);
    CmdObserver ret = (cPtr == global::System.IntPtr.Zero) ? null : new CmdObserver(cPtr, false);
    return ret;
  }

}

}
