//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgComposite : MgBaseShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MgComposite(global::System.IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.MgComposite_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgComposite obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static int Type() {
    int ret = touchvgPINVOKE.MgComposite_Type();
    return ret;
  }

  public int getShapeCount() {
    int ret = touchvgPINVOKE.MgComposite_getShapeCount(swigCPtr);
    return ret;
  }

  public MgShapes shapes() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgComposite_shapes(swigCPtr);
    MgShapes ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapes(cPtr, false);
    return ret;
  }

  public MgShape getOwnerShape() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgComposite_getOwnerShape(swigCPtr);
    MgShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShape(cPtr, false);
    return ret;
  }

  public virtual bool canOffsetShapeAlone(MgShape shape) {
    bool ret = (SwigDerivedClassHasMethod("canOffsetShapeAlone", swigMethodTypes36) ? touchvgPINVOKE.MgComposite_canOffsetShapeAloneSwigExplicitMgComposite(swigCPtr, MgShape.getCPtr(shape)) : touchvgPINVOKE.MgComposite_canOffsetShapeAlone(swigCPtr, MgShape.getCPtr(shape)));
    return ret;
  }

  protected MgComposite() : this(touchvgPINVOKE.new_MgComposite(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("clone", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMgComposite_0(SwigDirectorclone);
    if (SwigDerivedClassHasMethod("copy", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMgComposite_1(SwigDirectorcopy);
    if (SwigDerivedClassHasMethod("release", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMgComposite_2(SwigDirectorrelease);
    if (SwigDerivedClassHasMethod("addRef", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateMgComposite_3(SwigDirectoraddRef);
    if (SwigDerivedClassHasMethod("equals", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateMgComposite_4(SwigDirectorequals);
    if (SwigDerivedClassHasMethod("getType", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateMgComposite_5(SwigDirectorgetType);
    if (SwigDerivedClassHasMethod("isKindOf", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateMgComposite_6(SwigDirectorisKindOf);
    if (SwigDerivedClassHasMethod("getExtent", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateMgComposite_7(SwigDirectorgetExtent);
    if (SwigDerivedClassHasMethod("getChangeCount", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateMgComposite_8(SwigDirectorgetChangeCount);
    if (SwigDerivedClassHasMethod("resetChangeCount", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateMgComposite_9(SwigDirectorresetChangeCount);
    if (SwigDerivedClassHasMethod("afterChanged", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateMgComposite_10(SwigDirectorafterChanged);
    if (SwigDerivedClassHasMethod("update", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateMgComposite_11(SwigDirectorupdate);
    if (SwigDerivedClassHasMethod("transform", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateMgComposite_12(SwigDirectortransform);
    if (SwigDerivedClassHasMethod("clear", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateMgComposite_13(SwigDirectorclear);
    if (SwigDerivedClassHasMethod("clearCachedData", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateMgComposite_14(SwigDirectorclearCachedData);
    if (SwigDerivedClassHasMethod("getPointCount", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateMgComposite_15(SwigDirectorgetPointCount);
    if (SwigDerivedClassHasMethod("getPoint", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateMgComposite_16(SwigDirectorgetPoint);
    if (SwigDerivedClassHasMethod("setPoint", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateMgComposite_17(SwigDirectorsetPoint);
    if (SwigDerivedClassHasMethod("isClosed", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateMgComposite_18(SwigDirectorisClosed);
    if (SwigDerivedClassHasMethod("isCurve", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateMgComposite_19(SwigDirectorisCurve);
    if (SwigDerivedClassHasMethod("hitTest", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateMgComposite_20(SwigDirectorhitTest);
    if (SwigDerivedClassHasMethod("hitTestBox", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateMgComposite_21(SwigDirectorhitTestBox);
    if (SwigDerivedClassHasMethod("draw", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateMgComposite_22(SwigDirectordraw);
    if (SwigDerivedClassHasMethod("draw2", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateMgComposite_23(SwigDirectordraw2);
    if (SwigDerivedClassHasMethod("output", swigMethodTypes24))
      swigDelegate24 = new SwigDelegateMgComposite_24(SwigDirectoroutput);
    if (SwigDerivedClassHasMethod("save", swigMethodTypes25))
      swigDelegate25 = new SwigDelegateMgComposite_25(SwigDirectorsave);
    if (SwigDerivedClassHasMethod("load", swigMethodTypes26))
      swigDelegate26 = new SwigDelegateMgComposite_26(SwigDirectorload);
    if (SwigDerivedClassHasMethod("getHandleCount", swigMethodTypes27))
      swigDelegate27 = new SwigDelegateMgComposite_27(SwigDirectorgetHandleCount);
    if (SwigDerivedClassHasMethod("getHandlePoint", swigMethodTypes28))
      swigDelegate28 = new SwigDelegateMgComposite_28(SwigDirectorgetHandlePoint);
    if (SwigDerivedClassHasMethod("setHandlePoint", swigMethodTypes29))
      swigDelegate29 = new SwigDelegateMgComposite_29(SwigDirectorsetHandlePoint);
    if (SwigDerivedClassHasMethod("isHandleFixed", swigMethodTypes30))
      swigDelegate30 = new SwigDelegateMgComposite_30(SwigDirectorisHandleFixed);
    if (SwigDerivedClassHasMethod("getHandleType", swigMethodTypes31))
      swigDelegate31 = new SwigDelegateMgComposite_31(SwigDirectorgetHandleType);
    if (SwigDerivedClassHasMethod("offset", swigMethodTypes32))
      swigDelegate32 = new SwigDelegateMgComposite_32(SwigDirectoroffset);
    if (SwigDerivedClassHasMethod("setFlag", swigMethodTypes33))
      swigDelegate33 = new SwigDelegateMgComposite_33(SwigDirectorsetFlag);
    if (SwigDerivedClassHasMethod("setOwner", swigMethodTypes34))
      swigDelegate34 = new SwigDelegateMgComposite_34(SwigDirectorsetOwner);
    if (SwigDerivedClassHasMethod("getSubType", swigMethodTypes35))
      swigDelegate35 = new SwigDelegateMgComposite_35(SwigDirectorgetSubType);
    if (SwigDerivedClassHasMethod("canOffsetShapeAlone", swigMethodTypes36))
      swigDelegate36 = new SwigDelegateMgComposite_36(SwigDirectorcanOffsetShapeAlone);
    touchvgPINVOKE.MgComposite_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23, swigDelegate24, swigDelegate25, swigDelegate26, swigDelegate27, swigDelegate28, swigDelegate29, swigDelegate30, swigDelegate31, swigDelegate32, swigDelegate33, swigDelegate34, swigDelegate35, swigDelegate36);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MgComposite));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorclone() {
    return MgObject.getCPtr(clone()).Handle;
  }

  private void SwigDirectorcopy(global::System.IntPtr src) {
    copy(new MgObject(src, false));
  }

  private void SwigDirectorrelease() {
    release();
  }

  private void SwigDirectoraddRef() {
    addRef();
  }

  private bool SwigDirectorequals(global::System.IntPtr src) {
    return equals(new MgObject(src, false));
  }

  private int SwigDirectorgetType() {
    return getType();
  }

  private bool SwigDirectorisKindOf(int type) {
    return isKindOf(type);
  }

  private global::System.IntPtr SwigDirectorgetExtent() {
    return Box2d.getCPtr(getExtent()).Handle;
  }

  private int SwigDirectorgetChangeCount() {
    return getChangeCount();
  }

  private void SwigDirectorresetChangeCount(int count) {
    resetChangeCount(count);
  }

  private void SwigDirectorafterChanged() {
    afterChanged();
  }

  private void SwigDirectorupdate() {
    update();
  }

  private void SwigDirectortransform(global::System.IntPtr mat) {
    transform(new Matrix2d(mat, false));
  }

  private void SwigDirectorclear() {
    clear();
  }

  private void SwigDirectorclearCachedData() {
    clearCachedData();
  }

  private int SwigDirectorgetPointCount() {
    return getPointCount();
  }

  private global::System.IntPtr SwigDirectorgetPoint(int index) {
    return Point2d.getCPtr(getPoint(index)).Handle;
  }

  private void SwigDirectorsetPoint(int index, global::System.IntPtr pt) {
    setPoint(index, new Point2d(pt, false));
  }

  private bool SwigDirectorisClosed() {
    return isClosed();
  }

  private bool SwigDirectorisCurve() {
    return isCurve();
  }

  private float SwigDirectorhitTest(global::System.IntPtr pt, float tol, global::System.IntPtr res) {
    return hitTest(new Point2d(pt, false), tol, new MgHitResult(res, false));
  }

  private bool SwigDirectorhitTestBox(global::System.IntPtr rect) {
    return hitTestBox(new Box2d(rect, false));
  }

  private bool SwigDirectordraw(int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment) {
    return draw(mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }

  private bool SwigDirectordraw2(global::System.IntPtr owner, int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment) {
    return draw2((owner == global::System.IntPtr.Zero) ? null : new MgObject(owner, false), mode, new GiGraphics(gs, false), new GiContext(ctx, false), segment);
  }

  private void SwigDirectoroutput(global::System.IntPtr path) {
    output(new MgPath(path, false));
  }

  private bool SwigDirectorsave(global::System.IntPtr s) {
    return save((s == global::System.IntPtr.Zero) ? null : new MgStorage(s, false));
  }

  private bool SwigDirectorload(global::System.IntPtr factory, global::System.IntPtr s) {
    return load((factory == global::System.IntPtr.Zero) ? null : new MgShapeFactory(factory, false), (s == global::System.IntPtr.Zero) ? null : new MgStorage(s, false));
  }

  private int SwigDirectorgetHandleCount() {
    return getHandleCount();
  }

  private global::System.IntPtr SwigDirectorgetHandlePoint(int index) {
    return Point2d.getCPtr(getHandlePoint(index)).Handle;
  }

  private bool SwigDirectorsetHandlePoint(int index, global::System.IntPtr pt, float tol) {
    return setHandlePoint(index, new Point2d(pt, false), tol);
  }

  private bool SwigDirectorisHandleFixed(int index) {
    return isHandleFixed(index);
  }

  private int SwigDirectorgetHandleType(int index) {
    return getHandleType(index);
  }

  private bool SwigDirectoroffset(global::System.IntPtr vec, int segment) {
    return offset(new Vector2d(vec, false), segment);
  }

  private void SwigDirectorsetFlag(int bit, bool on) {
    setFlag((MgShapeBit)bit, on);
  }

  private void SwigDirectorsetOwner(global::System.IntPtr owner) {
    setOwner((owner == global::System.IntPtr.Zero) ? null : new MgObject(owner, false));
  }

  private int SwigDirectorgetSubType() {
    return getSubType();
  }

  private bool SwigDirectorcanOffsetShapeAlone(global::System.IntPtr shape) {
    return canOffsetShapeAlone((shape == global::System.IntPtr.Zero) ? null : new MgShape(shape, false));
  }

  public delegate global::System.IntPtr SwigDelegateMgComposite_0();
  public delegate void SwigDelegateMgComposite_1(global::System.IntPtr src);
  public delegate void SwigDelegateMgComposite_2();
  public delegate void SwigDelegateMgComposite_3();
  public delegate bool SwigDelegateMgComposite_4(global::System.IntPtr src);
  public delegate int SwigDelegateMgComposite_5();
  public delegate bool SwigDelegateMgComposite_6(int type);
  public delegate global::System.IntPtr SwigDelegateMgComposite_7();
  public delegate int SwigDelegateMgComposite_8();
  public delegate void SwigDelegateMgComposite_9(int count);
  public delegate void SwigDelegateMgComposite_10();
  public delegate void SwigDelegateMgComposite_11();
  public delegate void SwigDelegateMgComposite_12(global::System.IntPtr mat);
  public delegate void SwigDelegateMgComposite_13();
  public delegate void SwigDelegateMgComposite_14();
  public delegate int SwigDelegateMgComposite_15();
  public delegate global::System.IntPtr SwigDelegateMgComposite_16(int index);
  public delegate void SwigDelegateMgComposite_17(int index, global::System.IntPtr pt);
  public delegate bool SwigDelegateMgComposite_18();
  public delegate bool SwigDelegateMgComposite_19();
  public delegate float SwigDelegateMgComposite_20(global::System.IntPtr pt, float tol, global::System.IntPtr res);
  public delegate bool SwigDelegateMgComposite_21(global::System.IntPtr rect);
  public delegate bool SwigDelegateMgComposite_22(int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment);
  public delegate bool SwigDelegateMgComposite_23(global::System.IntPtr owner, int mode, global::System.IntPtr gs, global::System.IntPtr ctx, int segment);
  public delegate void SwigDelegateMgComposite_24(global::System.IntPtr path);
  public delegate bool SwigDelegateMgComposite_25(global::System.IntPtr s);
  public delegate bool SwigDelegateMgComposite_26(global::System.IntPtr factory, global::System.IntPtr s);
  public delegate int SwigDelegateMgComposite_27();
  public delegate global::System.IntPtr SwigDelegateMgComposite_28(int index);
  public delegate bool SwigDelegateMgComposite_29(int index, global::System.IntPtr pt, float tol);
  public delegate bool SwigDelegateMgComposite_30(int index);
  public delegate int SwigDelegateMgComposite_31(int index);
  public delegate bool SwigDelegateMgComposite_32(global::System.IntPtr vec, int segment);
  public delegate void SwigDelegateMgComposite_33(int bit, bool on);
  public delegate void SwigDelegateMgComposite_34(global::System.IntPtr owner);
  public delegate int SwigDelegateMgComposite_35();
  public delegate bool SwigDelegateMgComposite_36(global::System.IntPtr shape);

  private SwigDelegateMgComposite_0 swigDelegate0;
  private SwigDelegateMgComposite_1 swigDelegate1;
  private SwigDelegateMgComposite_2 swigDelegate2;
  private SwigDelegateMgComposite_3 swigDelegate3;
  private SwigDelegateMgComposite_4 swigDelegate4;
  private SwigDelegateMgComposite_5 swigDelegate5;
  private SwigDelegateMgComposite_6 swigDelegate6;
  private SwigDelegateMgComposite_7 swigDelegate7;
  private SwigDelegateMgComposite_8 swigDelegate8;
  private SwigDelegateMgComposite_9 swigDelegate9;
  private SwigDelegateMgComposite_10 swigDelegate10;
  private SwigDelegateMgComposite_11 swigDelegate11;
  private SwigDelegateMgComposite_12 swigDelegate12;
  private SwigDelegateMgComposite_13 swigDelegate13;
  private SwigDelegateMgComposite_14 swigDelegate14;
  private SwigDelegateMgComposite_15 swigDelegate15;
  private SwigDelegateMgComposite_16 swigDelegate16;
  private SwigDelegateMgComposite_17 swigDelegate17;
  private SwigDelegateMgComposite_18 swigDelegate18;
  private SwigDelegateMgComposite_19 swigDelegate19;
  private SwigDelegateMgComposite_20 swigDelegate20;
  private SwigDelegateMgComposite_21 swigDelegate21;
  private SwigDelegateMgComposite_22 swigDelegate22;
  private SwigDelegateMgComposite_23 swigDelegate23;
  private SwigDelegateMgComposite_24 swigDelegate24;
  private SwigDelegateMgComposite_25 swigDelegate25;
  private SwigDelegateMgComposite_26 swigDelegate26;
  private SwigDelegateMgComposite_27 swigDelegate27;
  private SwigDelegateMgComposite_28 swigDelegate28;
  private SwigDelegateMgComposite_29 swigDelegate29;
  private SwigDelegateMgComposite_30 swigDelegate30;
  private SwigDelegateMgComposite_31 swigDelegate31;
  private SwigDelegateMgComposite_32 swigDelegate32;
  private SwigDelegateMgComposite_33 swigDelegate33;
  private SwigDelegateMgComposite_34 swigDelegate34;
  private SwigDelegateMgComposite_35 swigDelegate35;
  private SwigDelegateMgComposite_36 swigDelegate36;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(Matrix2d) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(int), typeof(Point2d) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(Point2d), typeof(float), typeof(MgHitResult) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(Box2d) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(int), typeof(GiGraphics), typeof(GiContext), typeof(int) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(MgObject), typeof(int), typeof(GiGraphics), typeof(GiContext), typeof(int) };
  private static global::System.Type[] swigMethodTypes24 = new global::System.Type[] { typeof(MgPath) };
  private static global::System.Type[] swigMethodTypes25 = new global::System.Type[] { typeof(MgStorage) };
  private static global::System.Type[] swigMethodTypes26 = new global::System.Type[] { typeof(MgShapeFactory), typeof(MgStorage) };
  private static global::System.Type[] swigMethodTypes27 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes28 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes29 = new global::System.Type[] { typeof(int), typeof(Point2d), typeof(float) };
  private static global::System.Type[] swigMethodTypes30 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes31 = new global::System.Type[] { typeof(int) };
  private static global::System.Type[] swigMethodTypes32 = new global::System.Type[] { typeof(Vector2d), typeof(int) };
  private static global::System.Type[] swigMethodTypes33 = new global::System.Type[] { typeof(MgShapeBit), typeof(bool) };
  private static global::System.Type[] swigMethodTypes34 = new global::System.Type[] { typeof(MgObject) };
  private static global::System.Type[] swigMethodTypes35 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes36 = new global::System.Type[] { typeof(MgShape) };
}

}
