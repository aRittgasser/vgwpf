//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgHitResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgHitResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgHitResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgHitResult() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgHitResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Point2d nearpt {
    set {
      touchvgPINVOKE.MgHitResult_nearpt_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = touchvgPINVOKE.MgHitResult_nearpt_get(swigCPtr);
      Point2d ret = (cPtr == global::System.IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public int segment {
    set {
      touchvgPINVOKE.MgHitResult_segment_set(swigCPtr, value);
    } 
    get {
      int ret = touchvgPINVOKE.MgHitResult_segment_get(swigCPtr);
      return ret;
    } 
  }

  public bool inside {
    set {
      touchvgPINVOKE.MgHitResult_inside_set(swigCPtr, value);
    } 
    get {
      bool ret = touchvgPINVOKE.MgHitResult_inside_get(swigCPtr);
      return ret;
    } 
  }

  public bool contained {
    set {
      touchvgPINVOKE.MgHitResult_contained_set(swigCPtr, value);
    } 
    get {
      bool ret = touchvgPINVOKE.MgHitResult_contained_get(swigCPtr);
      return ret;
    } 
  }

  public float dist {
    set {
      touchvgPINVOKE.MgHitResult_dist_set(swigCPtr, value);
    } 
    get {
      float ret = touchvgPINVOKE.MgHitResult_dist_get(swigCPtr);
      return ret;
    } 
  }

  public int mask {
    set {
      touchvgPINVOKE.MgHitResult_mask_set(swigCPtr, value);
    } 
    get {
      int ret = touchvgPINVOKE.MgHitResult_mask_get(swigCPtr);
      return ret;
    } 
  }

  public int ignoreHandle {
    set {
      touchvgPINVOKE.MgHitResult_ignoreHandle_set(swigCPtr, value);
    } 
    get {
      int ret = touchvgPINVOKE.MgHitResult_ignoreHandle_get(swigCPtr);
      return ret;
    } 
  }

  public MgHitResult() : this(touchvgPINVOKE.new_MgHitResult(), true) {
  }

  public bool snapVertexEnabled() {
    bool ret = touchvgPINVOKE.MgHitResult_snapVertexEnabled(swigCPtr);
    return ret;
  }

  public bool snapEdgeEnabled() {
    bool ret = touchvgPINVOKE.MgHitResult_snapEdgeEnabled(swigCPtr);
    return ret;
  }

  public void disnableSnapVertex() {
    touchvgPINVOKE.MgHitResult_disnableSnapVertex(swigCPtr);
  }

  public void disnableSnapEdge() {
    touchvgPINVOKE.MgHitResult_disnableSnapEdge(swigCPtr);
  }

}

}
