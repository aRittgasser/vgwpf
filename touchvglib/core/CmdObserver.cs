//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class CmdObserver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CmdObserver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CmdObserver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CmdObserver() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_CmdObserver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void onDocLoaded(MgMotion sender, bool forUndo) {
    touchvgPINVOKE.CmdObserver_onDocLoaded(swigCPtr, MgMotion.getCPtr(sender), forUndo);
  }

  public virtual void onEnterSelectCommand(MgMotion sender) {
    touchvgPINVOKE.CmdObserver_onEnterSelectCommand(swigCPtr, MgMotion.getCPtr(sender));
  }

  public virtual void onUnloadCommands(MgCmdManager sender) {
    touchvgPINVOKE.CmdObserver_onUnloadCommands(swigCPtr, MgCmdManager.getCPtr(sender));
  }

  public virtual bool selectActionsNeedHided(MgMotion sender) {
    bool ret = touchvgPINVOKE.CmdObserver_selectActionsNeedHided(swigCPtr, MgMotion.getCPtr(sender));
    return ret;
  }

  public virtual int addShapeActions(MgMotion sender, Ints actions, int n, MgShape sp) {
    int ret = touchvgPINVOKE.CmdObserver_addShapeActions(swigCPtr, MgMotion.getCPtr(sender), Ints.getCPtr(actions), n, MgShape.getCPtr(sp));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool doAction(MgMotion sender, int action) {
    bool ret = touchvgPINVOKE.CmdObserver_doAction(swigCPtr, MgMotion.getCPtr(sender), action);
    return ret;
  }

  public virtual bool doEndAction(MgMotion sender, int action) {
    bool ret = touchvgPINVOKE.CmdObserver_doEndAction(swigCPtr, MgMotion.getCPtr(sender), action);
    return ret;
  }

  public virtual void drawInShapeCommand(MgMotion sender, MgCommand cmd, GiGraphics gs) {
    touchvgPINVOKE.CmdObserver_drawInShapeCommand(swigCPtr, MgMotion.getCPtr(sender), MgCommand.getCPtr(cmd), GiGraphics.getCPtr(gs));
  }

  public virtual void drawInSelectCommand(MgMotion sender, MgShape sp, int handleIndex, GiGraphics gs) {
    touchvgPINVOKE.CmdObserver_drawInSelectCommand(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp), handleIndex, GiGraphics.getCPtr(gs));
  }

  public virtual void onSelectionChanged(MgMotion sender) {
    touchvgPINVOKE.CmdObserver_onSelectionChanged(swigCPtr, MgMotion.getCPtr(sender));
  }

  public virtual bool onShapeWillAdded(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeWillAdded(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual void onShapeAdded(MgMotion sender, MgShape sp) {
    touchvgPINVOKE.CmdObserver_onShapeAdded(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
  }

  public virtual bool onShapeWillDeleted(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeWillDeleted(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual int onShapeDeleted(MgMotion sender, MgShape sp) {
    int ret = touchvgPINVOKE.CmdObserver_onShapeDeleted(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual bool onShapeCanRotated(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeCanRotated(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual bool onShapeCanTransform(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeCanTransform(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual bool onShapeCanUnlock(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeCanUnlock(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual bool onShapeCanUngroup(MgMotion sender, MgShape sp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeCanUngroup(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
    return ret;
  }

  public virtual bool onShapeCanMovedHandle(MgMotion sender, MgShape sp, int index) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeCanMovedHandle(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp), index);
    return ret;
  }

  public virtual void onShapeMoved(MgMotion sender, MgShape sp, int segment) {
    touchvgPINVOKE.CmdObserver_onShapeMoved(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp), segment);
  }

  public virtual bool onShapeWillChanged(MgMotion sender, MgShape sp, MgShape oldsp) {
    bool ret = touchvgPINVOKE.CmdObserver_onShapeWillChanged(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp), MgShape.getCPtr(oldsp));
    return ret;
  }

  public virtual void onShapeChanged(MgMotion sender, MgShape shape) {
    touchvgPINVOKE.CmdObserver_onShapeChanged(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(shape));
  }

  public virtual MgBaseShape createShape(MgMotion sender, int type) {
    global::System.IntPtr cPtr = touchvgPINVOKE.CmdObserver_createShape(swigCPtr, MgMotion.getCPtr(sender), type);
    MgBaseShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgBaseShape(cPtr, false);
    return ret;
  }

  public virtual MgCommand createCommand(MgMotion sender, string name) {
    global::System.IntPtr cPtr = touchvgPINVOKE.CmdObserver_createCommand(swigCPtr, MgMotion.getCPtr(sender), name);
    MgCommand ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgCommand(cPtr, false);
    return ret;
  }

  public virtual bool onPreGesture(MgMotion sender) {
    bool ret = touchvgPINVOKE.CmdObserver_onPreGesture(swigCPtr, MgMotion.getCPtr(sender));
    return ret;
  }

  public virtual void onPostGesture(MgMotion sender) {
    touchvgPINVOKE.CmdObserver_onPostGesture(swigCPtr, MgMotion.getCPtr(sender));
  }

  public virtual void onPointSnapped(MgMotion sender, MgShape sp) {
    touchvgPINVOKE.CmdObserver_onPointSnapped(swigCPtr, MgMotion.getCPtr(sender), MgShape.getCPtr(sp));
  }

}

}
