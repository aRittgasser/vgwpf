//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.5
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace touchvg.core {

public class MgLayer : MgShapes {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MgLayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.MgLayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MgLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new static int Type() {
    int ret = touchvgPINVOKE.MgLayer_Type();
    return ret;
  }

  public MgLayer cloneLayer() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgLayer_cloneLayer(swigCPtr);
    MgLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgLayer(cPtr, false);
    return ret;
  }

  public static MgLayer create(MgShapeDoc doc, int index) {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgLayer_create(MgShapeDoc.getCPtr(doc), index);
    MgLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgLayer(cPtr, false);
    return ret;
  }

  public MgShapeDoc doc() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgLayer_doc(swigCPtr);
    MgShapeDoc ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgShapeDoc(cPtr, false);
    return ret;
  }

  public bool isHided() {
    bool ret = touchvgPINVOKE.MgLayer_isHided(swigCPtr);
    return ret;
  }

  public void setHided(bool hided) {
    touchvgPINVOKE.MgLayer_setHided(swigCPtr, hided);
  }

  public bool isLocked() {
    bool ret = touchvgPINVOKE.MgLayer_isLocked(swigCPtr);
    return ret;
  }

  public void setLocked(bool locked) {
    touchvgPINVOKE.MgLayer_setLocked(swigCPtr, locked);
  }

  public override MgObject clone() {
    global::System.IntPtr cPtr = touchvgPINVOKE.MgLayer_clone(swigCPtr);
    MgObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new MgObject(cPtr, false);
    return ret;
  }

  public override void copy(MgObject src) {
    touchvgPINVOKE.MgLayer_copy(swigCPtr, MgObject.getCPtr(src));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void release() {
    touchvgPINVOKE.MgLayer_release(swigCPtr);
  }

  public override bool equals(MgObject src) {
    bool ret = touchvgPINVOKE.MgLayer_equals(swigCPtr, MgObject.getCPtr(src));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int getType() {
    int ret = touchvgPINVOKE.MgLayer_getType(swigCPtr);
    return ret;
  }

  public override bool isKindOf(int type) {
    bool ret = touchvgPINVOKE.MgLayer_isKindOf(swigCPtr, type);
    return ret;
  }

}

}
